(define (find s predicate)
  (cond ((null? s) #f)
        ((predicate (car s)) (car s))
        (else (find (cdr-stream s) predicate))
  )
)

(define (scale-stream s k)
  (cons-stream (* (car s) k)
               (scale-stream (cdr-stream s) k))
)

(define (has-cycle s)
  (define (has-cycle-helper slow fast)
          (cond ((eq? slow fast) #t)
                ((or (null? (cdr-stream fast))
                  (null? (cdr-stream (cdr-stream fast)))) #f)
                (else (has-cycle-helper (cdr-stream slow)
                        (cdr-stream (cdr-stream fast))))
          )
  )
  (if (or (null? s) (null? (cdr-stream s)))
      #f
      (has-cycle-helper s (cdr-stream s))
  )
)
(define (has-cycle-constant s)
  'YOUR-CODE-HERE
)
